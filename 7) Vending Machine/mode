module mode #(parameter COUNT_WAIT= 999_999_999*3, //3 sec wait
              parameter COUNT_RESET= 999_999_999*5,
              parameter COIN_DELAY= 999_999_999)
   ( 
    input clk, i_rst,
    input enough_ch, enough_payment, cancel_btn, 
    input [4:0]counter_ch_10, counter_ch_20, counter_ch_5, counter_ch_1, //how much coins of 10 is needed for change. output of 'check_change' model
    input [4:0] i_new_10, i_new_20,  i_new_5, i_new_1, //new coins inserted. output of 'payment_reciever' model
    
    input [5:0] i_am_1, i_am_5, i_am_10, i_am_20, 
    input [1:0] sel_product, //input
    input no_payment, //output of 'payment_reciever'
    input no_ch, //output of 'check_change'
    
    output reg [4:0] return_1 ,return_5,return_10,return_20, //input of LCD_rom.v how much coins of change/cancel are left to give
    output reg en_payment, //input of payment_reciever.v
    output reg en_check_ch, //input of check_change.v
    output reg servo_20, servo_10, servo_5, servo_1,
    output reg  en_money_after_ch20, en_money_after_ch10, en_money_after_ch5, en_money_after_ch1, //input of 'store_money' module. updates money after change is given
    output reg en_add_new, //input of 'store_money' module. en to add new_x to total am of money in the machine 
    
    output [4:0] o_vm_state, //transfer the mode to seg_7   
                             
    output give_20, give_10, give_5,give_1, //LED imitating coin drops as change money is given to the customer
    output reg m_rst, //reset when the deal is complete. propogates as reset throught the system.
    output reg block_money, //blocks money from entering the system after full payment has been made
    output reg en_candy
    );
    
        
//    parameter IDLE=5'd0, BUY= 5'd1, CH_10= 5'd2, CH_5= 5'd3, CH_1= 5'd4, CANCEL_10= 5'd5,
//               CANCEL_5= 5'd6, CANCEL_1= 5'd7, CANCEL_20=5'd8, PAYMENT=5'd9,  
//               WAIT_PAYMENT=5'd11, WAIT_CHECK_CHANGE=5'd12, CHECK_CHANGE=5'd13, CH_20=5'd14, WAIT_COIN=5'd15,
//               WAIT_CANCEL=5'd16, UPDATE_MONEY_PAYMENT=5'd17, UPDATE_RETURN_CH=5'd18;

    parameter IDLE=5'd0, BUY= 5'd1, PAYMENT= 5'd2, WAIT_PAYMENT= 5'd3, UPDATE_MONEY_PAYMENT= 5'd4, CHECK_CHANGE= 5'd5,
               SEG_REG= 5'd6, CH_20= 5'd7, CH_10=5'd8, CH_5=5'd9, CH_1=5'd10, 
               WAIT_COIN=5'd11, UPDATE_RETURN_CH=5'd12, CANCEL_20=5'd13, CANCEL_10=5'd14, CANCEL_5=5'd15,
               CANCEL_1=5'd16, WAIT_CANCEL=5'd17;
    
    reg [4:0] mode=0, next_mode=0;
    reg [20:0]cnt_wait=0, cnt_reset=0, cnt_coin=0; 
    reg flag_wait=0, flag_reset=0, flag_coin=0;
    
    assign o_vm_state= mode;
    
    always@(posedge clk) begin
        if (i_rst || m_rst) begin
            cnt_wait<=0;
            cnt_reset<=0;
            cnt_coin<=0;
        end
        else begin
            cnt_wait<=0;
            cnt_reset<=0;
            cnt_coin<=0;
            if(flag_wait)
                cnt_wait<=cnt_wait+1;
            if(flag_reset)
                cnt_reset<=cnt_reset+1;
            if(flag_coin)
                cnt_coin<=cnt_coin+1; 
        end        
    end
    
    
    always@(posedge clk) begin
        if (i_rst)
        mode<=IDLE;
    else
        mode<=next_mode;  
    end
    
    always@* begin
        case(mode)
            IDLE://0
                if(i_rst) next_mode=IDLE;
                else next_mode=BUY;
            BUY://1
                if(en_payment==1) next_mode= PAYMENT;
                else next_mode=BUY;
            PAYMENT://2 
                if(enough_payment) next_mode= WAIT_PAYMENT;
                else if(cancel_btn==1) next_mode=WAIT_CANCEL;
                else if(no_payment==1 && cnt_reset== COUNT_RESET) next_mode=IDLE; //if no payment has been made for a long time it resets automatically.
                else next_mode= PAYMENT; 
            WAIT_PAYMENT: //wait to register all coins. even those who entered after full payment was made
                if(cnt_wait==COUNT_WAIT) next_mode= CHECK_CHANGE; //UPDATE_MONEY_PAYMENT
                else next_mode=WAIT_PAYMENT;
//            UPDATE_MONEY_PAYMENT: //add new coins to the total sum. happens for one clock because of addition.
//                next_mode= CHECK_CHANGE;
            CHECK_CHANGE: //5  
                if(enough_ch) next_mode=WAIT_COIN; //WAIT_CHECK_CHANGE
                else if(no_ch) next_mode=WAIT_CANCEL; //if machine doesnt have enough change it return the money
                else next_mode= CHECK_CHANGE;
//            WAIT_CHECK_CHANGE:  //en_candy<=1 and wait for changes to update through the machine
//                if(cnt_wait==COUNT_WAIT) next_mode= WAIT_COIN;
//                else next_mode=WAIT_CHECK_CHANGE;   
            SEG_REG: begin
                if(cancel_btn==1 || no_ch==1) next_mode=WAIT_CANCEL;
                else if(enough_ch) next_mode=WAIT_COIN; //WAIT_CHECK_CHANGE
                else next_mode= SEG_REG;
            end
            CH_20: //in this state for one clk, so substruction happens only once
                next_mode= WAIT_COIN; //after each substruction wait a set amount of time and than resume
            CH_10: 
                next_mode= WAIT_COIN; 
            CH_5:
                next_mode= WAIT_COIN;
            CH_1:   
                next_mode= WAIT_COIN;
            WAIT_COIN: 
                if(cnt_coin==COIN_DELAY)    
                    if(return_20 != 0) next_mode=CH_20; //wach clock gives a coin of twenty back until no more is needed. note: in 'check_change' module it was calculated how many coins are needed and if there are enough of them.
                    else if(return_10 != 0) next_mode=CH_10;
                    else if(return_5 != 0) next_mode=CH_5;
                    else if(return_1 != 0) next_mode=CH_1;
                    else next_mode= IDLE; //used to be UPDATE_RETURN_CH
                else next_mode= WAIT_COIN;
//            UPDATE_RETURN_CH:  //12
//                if(cnt_wait==COUNT_WAIT) next_mode= IDLE;
//                else next_mode=UPDATE_RETURN_CH;
            WAIT_CANCEL: //17
                if(cnt_coin==COIN_DELAY)    
                    if(return_20 != 0) next_mode=CANCEL_20; //wach clock gives a coin of twenty back until no more is needed. note: in 'check_change' module it was calculated how many coins are needed and if there are enough of them.
                    else if(return_10 != 0) next_mode=CANCEL_10;
                    else if(return_5 != 0) next_mode=CANCEL_5;
                    else if(return_1 != 0) next_mode=CANCEL_1;
                    else next_mode= IDLE; //used to be UPDATE_RETURN_CH
                else next_mode= WAIT_CANCEL;            
//                if(cnt_wait==COUNT_WAIT) next_mode= CANCEL_20;
//                else next_mode=WAIT_CANCEL;    
            CANCEL_20:
                next_mode= WAIT_CANCEL;
            CANCEL_10:
                next_mode= WAIT_CANCEL;
            CANCEL_5:
                next_mode= WAIT_CANCEL;
            CANCEL_1:  
                next_mode= WAIT_CANCEL;              
            default: next_mode= IDLE;       
        endcase
    end
    
    always@(posedge clk) begin
        case(mode)
            IDLE: begin
                m_rst<=1;
                flag_reset<=0;
                flag_wait<=0;
                flag_coin<=0;
                block_money<=0;
                
                return_20<=0;
                return_10<=0;
                return_5<= 0;
                return_1<= 0;
                
                return_20<=0;
                return_10 <=0;
                return_5<= 0;
                return_1<=0;
                
                en_add_new<=0;
                en_check_ch<=0;
                en_candy<=0;
                
                en_money_after_ch20<=0;
                en_money_after_ch10<=0;
                en_money_after_ch5<=0;
                en_money_after_ch1<=0;
                
                servo_20<=0;
                servo_10<=0;
                servo_5<=0;
                servo_1<=0;
            end
            BUY: begin
                m_rst<=0;
                block_money<=0;
                flag_reset<=0;
                flag_wait<=0;
                flag_coin<=0;
                if(sel_product!=0) en_payment<=1;
            
            end
            PAYMENT: begin
                flag_reset<=1; 
                flag_wait<=0;
                flag_coin<=0;   
            end 
            WAIT_PAYMENT: begin
                flag_reset<=0;
                flag_wait<=1;
                flag_coin<=0;
                block_money<=1;
            end   
//            UPDATE_MONEY_PAYMENT: begin
//                en_add_new<=1;
//                flag_wait<=0;
//                flag_reset<=0;
//                flag_coin<=0;
//            end    
            CHECK_CHANGE: begin
                en_add_new<=0;
                en_check_ch<=1;
                flag_reset<=0;
                flag_wait<=0;
                flag_coin<=0;
            end  
            SEG_REG: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;
                
                if(enough_ch==1) begin
                    return_20<= counter_ch_20;
                    return_10<= counter_ch_10;
                    return_5<= counter_ch_5;
                    return_1<= counter_ch_1; end
                else begin //if no_ch==1 or cancel btn==1.
                    return_20<= i_new_20;
                    return_10 <= i_new_10;
                    return_5<= i_new_5;
                    return_1<= i_new_1; end   
            end  
//            WAIT_CHECK_CHANGE: begin
//                flag_wait<=1;
//                flag_coin<=0; 
//                flag_reset<=0;

//                en_candy<=1;
//            end
            CH_20: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                return_20<= return_20-1;
                en_money_after_ch20<=1;
                servo_20<=1;
            end    
             CH_10: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                return_10<= return_10-1;
                en_money_after_ch10<=1;
                servo_10<=1;
             end
             CH_5: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                return_5<= return_5-1;
                en_money_after_ch5<=1;
                servo_5<=1;
             end
             CH_1: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                return_1<= return_1-1;
                en_money_after_ch1<=1;
                servo_1<=1;
             end
            WAIT_COIN: begin
                flag_coin<=1;
                flag_reset<=0;
                flag_wait<=0;
                en_candy<=1;
                
                en_money_after_ch20<=0;
                en_money_after_ch10<=0;
                en_money_after_ch5<=0;
                en_money_after_ch1<=0;
                if(cnt_coin==COIN_DELAY-1) begin
                    servo_20<=0;
                    servo_10<=0;
                    servo_5<=0;
                    servo_1<=0; end
            end    
//            UPDATE_RETURN_CH: begin
//                flag_wait<=1;
//                flag_coin<=0; 
//                flag_reset<=0;

//            end   
            WAIT_CANCEL: begin
                flag_wait<=0;
                flag_coin<=1;
                flag_reset<=0;
                
                en_money_after_ch20<=0;
                en_money_after_ch10<=0;
                en_money_after_ch5<=0;
                en_money_after_ch1<=0;
                
                if(cnt_coin==COIN_DELAY-1) begin
                servo_20<=0;
                servo_10<=0;
                servo_5<=0;
                servo_1<=0; end
            end 
            CANCEL_20: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                servo_20<=1;
                return_20<= return_20-1;
                en_money_after_ch20<=1;
            end
            CANCEL_10: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                servo_10<=1;
                return_10<= return_10-1;
                en_money_after_ch10<=1;
            end
            CANCEL_5: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                servo_5<=1;
                return_5<= return_5-1;
                en_money_after_ch5<=1;
            end
            CANCEL_1: begin
                flag_coin<=0; 
                flag_reset<=0;
                flag_wait<=0;

                servo_1<=1;
                return_1<= return_1 -1;
                en_money_after_ch1<=1;
            end
//        default:                
        endcase
    end
    
endmodule
