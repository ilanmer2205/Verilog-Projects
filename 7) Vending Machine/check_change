module check_change(
    input clk,i_rst, m_rst, //m_rst output of 'mode' model
    input [4:0]payment_in, //output of 'payment_reciever' model
    input [5:0]i_am_1, i_am_5, i_am_10, i_am_20,
    input [4:0] product_price,
    input en_check_ch, ///flag from mode. enable check change after a certain wait after completing payment
    output reg [4:0]counter_ch_10, counter_ch_20, counter_ch_5, counter_ch_1,
    output enough_ch, no_ch
    );
    
    parameter IDLE=3'b000, NEED_1=3'b001, NEED_5=3'b010, 
                NEED_10=3'b011, NEED_20=3'b100, WAIT=3'b110, UPDATE= 3'b111;
                
    reg [2:0] need=0, need_next=0;
    reg [4:0] customer_m_left=0, ch_to_give=0;
    reg r_enough_ch=0, r_no_ch=0;
    reg en_m_left=0;
    
    reg [5:0] r_am_20=0, r_am_10=0, r_am_5=0, r_am_1=0;
    
    assign enough_ch= r_enough_ch;
    assign no_ch= r_no_ch;
    
    always@(posedge clk or posedge i_rst) begin //deducts cost of candy when there's enough money
        if (i_rst || m_rst) begin
            customer_m_left<=0;
            en_m_left<=0; end
        else if(payment_in>=product_price) begin
                customer_m_left<= payment_in-product_price;
                en_m_left<=1; end        
        else begin
            customer_m_left<=0;
            en_m_left<=0; end
    end
    
    always@(posedge clk) begin
    if (i_rst || m_rst)
        need<=IDLE;
    else
        need<=need_next;    
    end   
      
    always@* begin
        case(need)
            IDLE:
                if(en_check_ch==1) need_next=WAIT;
                else need_next= IDLE;
            NEED_20:
                 need_next=WAIT;            
            NEED_10: 
                need_next=WAIT;
            NEED_5:
                need_next=WAIT;
            NEED_1: 
                need_next=WAIT; 
            WAIT:
                if(en_check_ch==1) begin ///wait until systm finished and en_check_ch flag in 'mode' is reset
                    if(ch_to_give>=20 && r_am_20) need_next=NEED_20;
                    else if(ch_to_give>=10 && r_am_10) need_next=NEED_10;
                    else if(ch_to_give>=5 && r_am_5) need_next=NEED_5;
                    else if(ch_to_give>=1 && r_am_1) need_next=NEED_1; 
                    else need_next= UPDATE; 
                end
                else
                    need_next=IDLE;  
            UPDATE:
                if(m_rst) need_next=IDLE;
                else need_next=UPDATE;             
            default: need_next=IDLE;   
        endcase
    end
    
    always@(posedge clk ) begin
        case (need)
            IDLE:  begin
                ch_to_give<=customer_m_left;
                counter_ch_20<=0;
                counter_ch_10<=0;
                counter_ch_5<=0;
                counter_ch_1<=0;
                r_enough_ch<=0;
                r_no_ch<=0;
                
                r_am_20<=i_am_20;
                r_am_10<=i_am_10;
                r_am_5<=i_am_5;
                r_am_1<=i_am_1;
                end      
            NEED_20: begin
                ch_to_give<= ch_to_give - 20;
                counter_ch_20<= counter_ch_20+1;
                r_am_20<=r_am_20-1;
                end
            NEED_10: begin
                ch_to_give<= ch_to_give - 10;
                counter_ch_10<= counter_ch_10+1;
                r_am_10<=r_am_10-1;
                end
            NEED_5: begin
                ch_to_give<= ch_to_give - 5;
                counter_ch_5<= counter_ch_5+1;
                r_am_5<=r_am_5-1;
                end
            NEED_1: begin
                ch_to_give<= ch_to_give - 1;
                counter_ch_1<= counter_ch_1+1;
                r_am_1<=r_am_1-1;
                end
            UPDATE:
                if(ch_to_give==0) begin
                    r_enough_ch<=1;
                    r_no_ch<=0; end
                else
                    r_no_ch<=1;           
        endcase
    end
endmodule

