module mode #(parameter COUNTER_1SEC=49_999_999)( 
    input clk, i_rst,
    input enough_ch, enough_payment, cancel_btn, 
    
    input counter_ch_10, //how much coins of 10 is needed for change. output of 'check_change' model
    input [1:0] counter_ch_5,
    input [4:0] counter_ch_1,
    
    input i_new_10, i_new_20, //new coins inserted. output of 'payment_reciever' model
    input [1:0] i_new_5,
    input [2:0] i_new_1,
    
    input [5:0] i_am_1, 
    input [5:0] i_am_5,  
    input [5:0] i_am_10, 
    input [2:0] i_am_20, 
    output [5:0] o_am_1, 
    output [5:0] o_am_5, 
    output [5:0] o_am_10,
    output [2:0] o_am_20, 
    
    output [3:0] o_vm_state, //transfer the mode to seg_7   
    output [4:0]am_return,   //sum of the returned money needed. change or cancel.   
                             //max change is 26-7=19. when return, change output will start from max change and decrese gradually. 
    output reg m_cancel, //determines the next out of two states of wait 
    output give_20, give_10, give_5,give_1, //LED imitating coin drops as change money is given to the customer
    output m_rst, //reset when the deal is complete. propogates as reset throught the system.
    output reg give_candy //led
    );
    
    parameter BUY=4'd0, WAIT= 4'd1, CH_10= 4'd2, CH_5= 4'd3, CH_1= 4'd4, CANCEL_10= 4'd5,
               CANCEL_5= 4'd6, CANCEL_1= 4'd7, CANCEL_20=4'd8, PAYMENT=4'd9;
               
    reg r_rst;
    reg [5:0] r_am_10,r_am_5,r_am_1;
    reg [2:0] r_am_20;
    reg [4:0]am_ch_1; //initialized to the same value as counter_ch_1 and than substrected each time when needed to give change
    reg [1:0]am_ch_5;
    reg am_ch_10,am_ch_20;
    reg [2:0]am_new_1;
    reg [1:0]am_new_5;
    reg am_new_10;
    reg am_new_20;
    reg [3:0] mode=0;
    reg [2:0] counter_3sec;
    reg half_sec;
    reg [25:0] counter_1sec;
    reg clk_1hz;
    reg r_give_1,r_give_5,r_give_10, r_give_20;
    
    
    assign o_am_20=r_am_20;
    assign o_am_10=r_am_10;
    assign o_am_5=r_am_5;
    assign o_am_1=r_am_1;
    
    assign m_rst= r_rst;
    assign am_return= enough_ch ? (am_ch_10*10+ am_ch_5*5+ am_ch_1):
                             (am_new_20*20 +am_new_10*10+ am_new_5*5+ am_new_1); //determines the diplayed return coins (cancel/change)
    
    assign give_10= r_give_10; //display on the LED the coins are returned (change or cancel).
    assign give_5= r_give_5; //r_give_10 && clk_1hz==1 is added to show the coin is out (to change the LED blink from 10ns to 0.5s).
    assign give_1= r_give_1; 
    assign give_20= r_give_20;
    assign o_vm_state=mode;
    
    always@(posedge clk) begin
    if(i_rst) begin
        mode<=BUY;
        r_rst<=0;
        m_cancel<=0;
        am_ch_20<=0;
        am_ch_10<=0;
        am_ch_5<=0;
        am_ch_1<=0;
        am_new_20<=0;        
        am_new_10<=0;
        am_new_5<=0;
        am_new_1<=0;
    end
    else    
        case(mode)
            BUY: begin //idle state, while not enough payment. payment or cancel requests happen in this mode 
                r_rst<=0;
                
                r_am_1<=i_am_1;
                r_am_5<=i_am_5;
                r_am_10<=i_am_10;
                r_am_20<=i_am_20;
                
                am_new_20<=i_new_20; 
                am_new_10<=i_new_10;
                am_new_5<=i_new_5;
                am_new_1<=i_new_1; 
                
//                am_ch_10<=counter_ch_10;  //initialized to the same value as counter_ch_10 to be able to change it
//                am_ch_5<=counter_ch_5;
//                am_ch_1<=counter_ch_1; 
                
                if(enough_payment) begin //procceed to start the purchase
                    mode<=PAYMENT;
                end
                else if(cancel_btn) begin //procced to cancel
                        mode<=PAYMENT;
                        m_cancel<=1; end
//                    else begin //keep it low
//                        am_ch_10<=0;
//                        am_ch_5<=0;
//                        am_ch_1<=0; end    
            end   
            PAYMENT: begin
                r_am_1<=o_am_1+i_new_1;//////////(2)o->r        
                r_am_5<=o_am_5+i_new_5;        
                r_am_10<=o_am_10+i_new_10;     
                r_am_20<=o_am_20+i_new_20;
                
                mode<=WAIT;
            end
             
            WAIT: begin
                if(counter_3sec==3)begin //wait for 3 seconds 
                    if(r_rst)
                        mode<=BUY;            
                        else 
                            if(enough_payment) begin
                                    if(enough_ch) begin
                                        am_ch_10<=counter_ch_10;  //initialized to the same value as counter_ch_10 to be able to change it
                                        am_ch_5<=counter_ch_5;
                                        am_ch_1<=counter_ch_1;
                                        
                                        mode<=CH_10; end //enough money&change-> procceed to return change 
                                    else
                                        mode<=CANCEL_20; //not enough change->proceed to give money back
                            end    
                            else    
                                if(m_cancel) begin
                                    mode<=CANCEL_20; 
                                end       
                end
            end                     
            CH_10: begin
                give_candy<=1;             
                if(half_sec==1) //every half a sec check if a 10 coin change is needed
                    if(am_ch_10 !=0) begin //if it is
                        am_ch_10<=am_ch_10-1; //return the 10 coin   
                        r_am_10<=r_am_10-1; //updates sum of money in the machine
                        r_give_10<=1; end //enables LED blink symobolizing the coin return
                    else begin
                        mode<=CH_5; //otherwise, when all the change of 10 coins is given, give the next needed coin change   
                        r_give_10<=0; end    
                             
            end            
            CH_5: begin  
                if(half_sec==1)
                    if(am_ch_5 !=0) begin 
                        am_ch_5<=am_ch_5-1;
                        r_am_5<=r_am_5-1;
                        r_give_5<=1;  end
                    else begin
                        mode<=CH_1;
                        r_give_5<=0; end
            end            
            CH_1: begin
                give_candy<=0;
                if(half_sec==1)
                    if(am_ch_1 !=0) begin 
                        am_ch_1<=am_ch_1-1;
                        r_am_1<=r_am_1-1;
                        r_give_1<=1; end
                    else begin
                        mode<=WAIT;
                        r_rst<=1; 
                        r_give_1<=0; end
            end
            CANCEL_20:
                if(half_sec==1)
                    if(am_new_20 !=0) begin 
                        am_new_20<=am_new_20-1;
                        r_am_20<=r_am_20-1;
                        r_give_20<=1; end
                    else begin
                        mode<=CANCEL_10;
                        r_give_20<=0; end            
            CANCEL_10:
                if(half_sec==1)
                    if(am_new_10 !=0) begin 
                        am_new_10<=am_new_10-1;
                        r_am_10<=r_am_10-1;
                        r_give_10<=1; end
                    else begin
                        mode<=CANCEL_5;
                        r_give_10<=0; end
            CANCEL_5:
                if(half_sec==1)
                    if(am_new_5 !=0) begin 
                        am_new_5<=am_new_5-1;
                        r_am_5<=r_am_5-1;
                        r_give_5<=1; end
                    else begin
                        mode<=CANCEL_1;
                        r_give_5<=0; end
            CANCEL_1:
                if(half_sec==1)
                    if(am_new_1 !=0) begin 
                        am_new_1<=am_new_1-1;
                        r_am_1<=r_am_1-1;
                        r_give_1<=1; end
                    else begin
                        m_cancel<=0; 
                        r_rst<=1;
                        mode<=WAIT;
                        r_give_1<=0; end
            default: mode<=BUY;            
        endcase
    end
    
    always@ (posedge clk or posedge i_rst ) begin
        if(i_rst) //no need to use r_rst, because it resets automatically in line 130.
            counter_3sec<=0;
        else if(counter_3sec==3)
            counter_3sec<=0;
            else if (mode== WAIT && half_sec) //half_sec is like posedge    
                    counter_3sec<=counter_3sec+1;
    end
    
    always@(posedge clk) begin //half a sec posedge
        if(i_rst) begin
            counter_1sec<=0;
            half_sec<=0; end
        else    
            if(counter_1sec==COUNTER_1SEC) begin
                counter_1sec<=0;
                clk_1hz<=~clk_1hz;
                half_sec<=1; end //acts like posedge every half a sec
            else begin
                counter_1sec <=counter_1sec+1;
                half_sec<=0; end
    end

endmodule
